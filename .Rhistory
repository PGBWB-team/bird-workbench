global_max <- species_data %>%
group_by(Location, Week) %>%
summarise(Count = n(), .groups = "drop") %>%
summarise(MaxCount = max(Count)) %>%
pull(MaxCount)
# Placeholder for filtered data
filtered_data <- reactiveVal(NULL)
for (i in seq_along(location_list)) {
local({
loc <- location_list[i]
output[[paste0("overviewPlot_", i)]] <- renderPlotly({
# Subset to location
species_data <- subset(species_data,
Location == loc)
# Create the plot
p <- ggplot(species_data, aes(x = Week)) +
geom_freqpoly(binwidth=1,aes(color = as.factor(Year))) +
scale_x_continuous(breaks = 1:52, limits = c(1, 52)) +
scale_y_continuous(limits = c(0, global_max + 50)) +
labs(title = loc, x = "Week", y = "Frequency") +
scale_color_manual(name = "Year", values = cols) +
theme_minimal()
# Convert to an interactive plotly object and register the click event
plotly_object <- ggplotly(p)
})
})
}
for (i in seq_along(location_list)) {
local({
loc <- location_list[i]
output[[paste0("frequencyPlot_", i)]] <- renderPlotly({
min_conf <- input$confidence_selection[1]
max_conf <- input$confidence_selection[2]
complete_data <- subset(complete_data,
as.numeric(Confidence) >= min_conf &
as.numeric(Confidence) <= max_conf &
Location == loc)
if (input$time_interval == "weekly") {
# Create the plot
p <- ggplot(complete_data, aes(x = Week,
key = Week.Year.Loc,
text = paste(
"Week:", Week,
"<br>Date Range:", get_week_date_range(Year, Week),
"<br>Count:", nrow(Week.Year.Loc)
))) +
geom_bar(position = "identity", alpha = 0.8, aes(fill = as.factor(Year))) +
scale_x_continuous(breaks = 1:52, limits = c(1, 52)) +
labs(title = loc, x = "Week", y = "Frequency") +
scale_fill_manual(name = "Year", values = cols) +
theme_minimal()
# Convert to an interactive plotly object and register the click event
plotly_object <- ggplotly(p, tooltip = "text")
event_register(plotly_object, "plotly_click")
plotly_object %>%
layout(clickmode = "event+select")
}
if (input$time_interval == "monthly") {
# Create the plot
p <- ggplot(complete_data, aes(x = Month,
key = Month.Year.Loc,
text = paste(
"Week:", Week,
"<br>Date Range:",
"<br>Count:", nrow(Month.Year.Loc)
))) +
geom_bar(position = "identity", alpha = 0.8, aes(fill = as.factor(Year))) +
scale_x_continuous(breaks = 1:12, limits = c(1, 12)) +
labs(title = loc, x = "Month", y = "Frequency") +
scale_fill_manual(name = "Year", values = cols) +
theme_minimal()
# Convert to an interactive plotly object and register the click event
plotly_object <- ggplotly(p, tooltip = "text")
event_register(plotly_object, "plotly_click")
plotly_object %>%
layout(clickmode = "event+select")
}
})
})
}
# Observe the selected data and filter the original dataframe
observe({
selected_data <- event_data("plotly_click")
if (!is.null(selected_data)) {
# Extract the selected weeks (x-values of bars clicked)
selected_weeks <- selected_data$x
}
# filter data based on the selected bin center
output$filtered_data <- DT::renderDataTable({
min_conf <- input$confidence_selection[1]
max_conf <- input$confidence_selection[2]
if (!is.null(selected_data)) {
out_df <- subset(complete_data, (Week.Year.Loc %in% selected_data$key &
as.numeric(Confidence)>=min_conf &
as.numeric(Confidence)<= max_conf), select=c("Begin.Time..s.", "End.Time..s.", "Week", "Confidence", "Location", "Begin.Path", "Species.Code"))
# Add action buttons for opening the website
out_df <- out_df %>%
rowwise() %>%
mutate(
Website = paste0(
"<a href='", URLencode("https://www.allaboutbirds.org/guide/"), Species.Code,
"' target='_blank'>Open Bird Guide</a>"
),
Sound.File = {
# Create the regex pattern for the current row
pattern <- paste0(
"^", as.character(round(as.numeric(Confidence), digits=3)), "_[0-9]+_", gsub(".wav", "", basename(Begin.Path)),
"_", Begin.Time..s., "s_", End.Time..s., "s.wav", "$"
)
# Find matching file
match <- all_files[str_detect(all_files, pattern)]
if (length(match) == 1) {
paste0(
"<a href='", URLencode(base_url), Species.Code,"/", match,
"' target=`_blank'>Open Sound File</a>"
)
} else {
"No File"
}
}
) %>%
ungroup()
datatable(out_df, escape = FALSE)
} else {
data.frame()
}
})
})
}
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
epiweek(as.Date(2022-04-20)) - 1
View(all_data)
as.Date(2022-04-20)
epiweek(as.Date("2022-04-20")) - 1
epiweek(as.Date("2022-04-20"))
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/overview_page_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
write_fst(all_data, "/Users/laurenwick/Dropbox/Lauren Wick/Plotly App/70conf_2020_to_2024.fst")
# Optionally save as fst file to read in the data in the future without needing to process it again.
# install.packages("fst")
library(fst)
# Set file path variables
file_2024 <- "/Users/laurenwick/Dropbox/Lauren Wick/2024 BirdNET runs/Combined_2024_V1.txt"
This is the script for reading in the BirdNET results
# This is the script for reading in the BirdNET results
# Set file path variables
file_2024 <- "/Users/laurenwick/Dropbox/Lauren Wick/2024 BirdNET runs/Combined_2024_V1.txt"
file_2023 <- "/Users/laurenwick/Dropbox/Lauren Wick/2023 BirdNET runs/Combined_2023_V1.txt"
file_2022 <- "/Users/laurenwick/Dropbox/Lauren Wick/2022 BirdNET runs/Combined_2022_V1.txt"
file_2021 <- "/Users/laurenwick/Dropbox/Lauren Wick/2021 BirdNET runs/Combined_2021_V1.txt"
file_2020 <- "/Users/laurenwick/Dropbox/Lauren Wick/2020 BirdNET runs/Combined_2020_V1.txt"
# Combine into one list
file_list <- c(file_2024, file_2023, file_2022, file_2021, file_2020)
# Read each file as a table
data <- lapply(file_list, read.table, header=TRUE, sep="\t", colClasses="character", quote="\"")
# Set file path variables
file_2024 <- "/Users/laurenwick/Dropbox/Lauren Wick/2024 BirdNET runs/Combined_2024_V1.txt"
file_2023 <- "/Users/laurenwick/Dropbox/Lauren Wick/2023 BirdNET runs/Combined_2023_V1.txt"
file_2022 <- "/Users/laurenwick/Dropbox/Lauren Wick/2022 BirdNET runs/Combined_2022_V1.txt"
file_2021 <- "/Users/laurenwick/Dropbox/Lauren Wick/2021 BirdNET runs/Combined_2021_V1.txt"
file_2020 <- "/Users/laurenwick/Dropbox/Lauren Wick/2020 BirdNET runs/Combined_2020_V1.txt"
# Combine into one list
file_list <- c(file_2024, file_2023, file_2022, file_2021, file_2020)
# Read each file as a table
data <- lapply(file_list, read.table, header=TRUE, sep="\t", colClasses="character", quote="\"")
# Read each file as a table
data <- lapply(file_list, read.table, header=TRUE, sep="\t", colClasses="character", quote="\"")
# Read each file as a table
data <- lapply(file_list, read.table, header=TRUE, sep="\t", colClasses="character", quote="\"")
# Subset rows with Confidence >= 0.5
data_70 <- lapply(data, subset, as.numeric(Confidence) >=0.7000)
# Create function to normalize file name lengths
normalize_length <- function(x, target_length = 3) {
if (length(x) > target_length) {
return(x[1:target_length]) # truncate to the first 3 elements
} else if (length(x) < target_length) {
return(c(x, rep(NA, target_length - length(x)))) # pad with NA
} else {
return(x) # already at target length
}
}
library(lubridate)
# Add columns for Location, Date, and Date.Time, Day.Of.Year
data_70 <- lapply(data_70, function(df) {
df[c("Location", "Date", "Date.Time")] <- do.call(rbind, lapply(strsplit(basename(df$Begin.Path), split="_"), normalize_length))
df["Date.Time"] <- paste(df$Date, substr(df$Date.Time, start=1, stop=6))
df["Date"] <- as.Date(df$Date, "%Y%m%d")
df["Date.Time"] <- ymd_hms(df$Date.Time, tz="UTC")
df["Day.Of.Year"] <- yday(df$Date)
return(df)
})
View(data_70)
# Remove file path and replace with only file name
data_70 <- lapply(data_70, function(df) {
df["Begin.Path"] <- basename(df$Begin.Path)
})
View(data_70)
# Subset rows with Confidence >= 0.5
data_70 <- lapply(data, subset, as.numeric(Confidence) >=0.7000)
# Add columns for Location, Date, and Date.Time, Day.Of.Year
data_70 <- lapply(data_70, function(df) {
df[c("Location", "Date", "Date.Time")] <- do.call(rbind, lapply(strsplit(basename(df$Begin.Path), split="_"), normalize_length))
df["Date.Time"] <- paste(df$Date, substr(df$Date.Time, start=1, stop=6))
df["Date"] <- as.Date(df$Date, "%Y%m%d")
df["Date.Time"] <- ymd_hms(df$Date.Time, tz="UTC")
df["Day.Of.Year"] <- yday(df$Date)
return(df)
})
# Remove file path and replace with only file name
data_70 <- lapply(data_70, function(df) {
df["Begin.Path"] <- basename(df$Begin.Path)
return(df)
})
View(data_70)
# Rename recorders
data_70 <- lapply(data_70, function(df) {
df$Location[df$Location == "SM-SCH1"] <- "House"
df$Location[df$Location == "SM-SCH1-V2"] <- "House"
df$Location[df$Location == "SMMIN1-GLEN"] <- "Glen"
df$Location[df$Location == "SM-SCH2-GLEN"] <- "Glen"
df$Location[df$Location == "SM1-PRA"] <- "Prairie"
df$Location[df$Location == "SM-SCH2-PRA"] <- "Prairie"
df$Location[df$Location == "SM-SCH2-WET"] <- "Wetland"
df$Location[df$Location == "SM-SCH2-WET2"] <- "Wetland"
df$Location[df$Location == "SM-SCH3-OAKS"] <- "Savanna"
df$Location[df$Location == "SM-SCH3-OAK2"] <- "Savanna"
df$Location[df$Location == "SM-SCH2-WROA"] <- "Forest"
return(df)
})
# Subset to locations of interest
location_list <- c("House", "Glen", "Prairie", "Wetland", "Savanna", "Forest")
data_70_subset <- lapply(data_70, subset, Location %in% location_list)
# Combine all DFs within list into one large DF
all_data <- do.call('rbind', data_70_subset)
# Optionally save as fst file to read in the data in the future without needing to process it again.
# install.packages("fst")
library(fst)
write_fst(all_data, "/Users/laurenwick/Dropbox/Lauren Wick/Plotly App/70conf_2020_to_2024.fst")
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
View(all_data)
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
# Helper to retrieve species code from common name on allaboutbirds.com:
unique(subset(all_data, Common.Name == "American Crow")$Species.Code)
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Prairie Haven/Scripts/plotly_app_review.R')
runApp('Dropbox/Lauren Wick/Plotly App/plotly_app.R')
runApp('Dropbox/Lauren Wick/Plotly App/plotly_app.R')
runApp('Dropbox/Lauren Wick/Plotly App/overview_page.R')
# Set LAS file location (downloaded from GeoData@Wi):
las_file <- "/Users/laurenwick/Dropbox/SCO - Lidar Project/Datasets/Madison_0383.las"
# Read the LAS file
las <- lidR::readLAS(las_file)
# Load packages
library(rlas)
library(lidR)
library(sf)
library(terra)
library(stars)
library(rgl)
library(future)
library(ggplot2)
summary(las)
# Print how the lidar data is classified
sort(unique(las@data$Classification))
plot(las, size = 3, color = "Classification")
# Filter LAS for DTM Generation. Only want categories 2 & 9
las_ground <- lidR::filter_poi(las, Classification == 2L | Classification == 9L)
# Inverse-Distance Weighting
# algorithm = knnidw(k = 10L, p = 2), interpolation through the k-nearest neighbor approach,
# with inverse-distance weighting. k = 10, number of k-nearest neighbors.
# p = 2, power for inverse-distance weighting
dtm_IDW <- lidR::rasterize_terrain(las_ground, res = 2, algorithm = knnidw(k = 10L, p = 2), keep_lowest = FALSE)
# Triangular Regular Network
dtm_TIN <- lidR::rasterize_terrain(las_ground, res = 2, algorithm = tin())
dtm_IDW_prod <- terrain(dtm_IDW, v=c("slope", "aspect"), unit = "radians")
dtm_IDW_hillshade <- shade(slope = dtm_IDW_prod$slope, aspect = dtm_IDW_prod$aspect)
plot(dtm_IDW_hillshade, col = gray(0:30/30), legend = FALSE)
# Triangular Regular Network
dtm_TIN_prod <- terrain(dtm_TIN, v=c("slope", "aspect"), unit = "radians")
dtm_TIN_hillshade <- shade(slope = dtm_TIN_prod$slope, aspect = dtm_TIN_prod$aspect)
plot(dtm_TIN_hillshade, col = gray(0:30/30), legend = FALSE)
# First, DTM Normalization:
norm_las_dtm <- las - dtm_TIN
plot(norm_las_dtm, bg="white")
# Second method, Point Cloud Normalization
# This involves interpolating cloud points. It is more computationally demanding.
norm_las_pc <- normalize_height(las, knnidw())
norm_las_pc_tin <- normalize_height(las, tin())
# Generate histogram of new elevation values
hist(lidR::filter_ground(norm_las_pc_tin)$Z, breaks = seq(-0.3, 0.6, 0.01), main = "", xlab = "Elevation")
# Method 1, Point to Raster method
chm_p2r <- rasterize_canopy(norm_las_pc_tin, res = 2, algorithm = p2r())
col <- height.colors(25)
plot(chm_p2r, col = col)
# What happens if I filter my las to include only vegetation, water, and ground points (aka, buildings filtered out)
filtered_las_norm <- filter_poi(norm_las_pc_tin, Classification %in% c(2, 3, 4, 5, 9))
filtered_chm_p2r <- rasterize_canopy(filtered_las_norm, res = 2, algorithm = p2r())
plot(filtered_chm_p2r, col=col)
# Method 2, Traingulation
chm_trian <- rasterize_canopy(norm_las_pc_tin, res = 2, algorithm = dsmtin())
plot(chm_trian, col=col)
filtered_chm_trian <- rasterize_canopy(filtered_las_norm, res = 2, algorithm = dsmtin())
plot(filtered_chm_trian, col=col)
# Trying with max_edge parameter, which defines the maximum edge of a triangle allowed in the Delaunay triangulation.
filtered_chm_trian_edge8 <- rasterize_canopy(filtered_las_norm, res = 2,
algorithm = dsmtin(max_edge = 8))
plot(filtered_chm_trian_edge8, col = col)
# Method 3, Pit-free algorithm
chm_pitfree <- rasterize_canopy(norm_las_pc_tin, res = 2,
pitfree(thresholds = c(0,6.56,16.40,32.8,49.21), max_edge = c(0,1.5)))
plot(chm_pitfree, col = col)
filtered_chm_pitfree <- rasterize_canopy(filtered_las_norm, res = 2,
pitfree(thresholds = c(0,6.56,16.40,32.8,49.21), max_edge = c(0,1.5)))
plot(filtered_chm_pitfree, col = col)
# Using triangulation method with the pitfree algorithm (creates pit free rasters)
# Recommended by Martin I, it's computational intensive
# 2 feet resolution
chm_pitfree = rasterize_canopy(norm_las_pc_tin, res=2, pitfree(c(0,6.56,16.40,32.8,49.21), c(0,8), subcircle = 0.2))
plot(chm_pitfree)
plot(filtered_chm_trian_edge8, col = col)
library(shiny); runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
yrs <- c("2024", "2023", "2020", "2021", "2000", "2022")
order(yrs)
yrs[order(yrs)]
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
year("2022")
year(as.Date("01-01-2023"))
year(as.Date("2023-01-01"))
year(as.Date("2023-01-01")) = "2023"
year(as.Date("2023-01-01")) == "2023"
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
library(tuneR)
t_wav <- tuneR::readWave("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
from = 203, to = 213, units = "seconds")
library(shiny); runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
tuneR::play(t_wav)
# file: SM-SCH1-V2_20240225_055200.wav
tuneR::setWavPlayer('/usr/bin/afplay')
t_wav <- tuneR::readWave("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
from = 203, to = 213, units = "seconds")
tuneR::play(t_wav)
gc()
t_wav <- tuneR::readWave("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
from = 203, to = 213, units = "seconds")
tuneR::play(t_wav)
t_wav <- tuneR::readWave("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
from = 4500, to = 4510, units = "seconds")
t_wav <- tuneR::readWave("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
from = 500, to = 510, units = "seconds")
tuneR::play(t_wav)
t_wav2 <- tuneR::readWave("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_075202.wav",
from = 500, to = 510, units = "seconds")
tuneR::play(t_wav2
tuneR::play(t_wav2)
tuneR::play(t_wav2)
install.packages("audio")
library(audio)
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
gc()
install.packages("av")
library(av)
read_audio_fft("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
start_time = 500, end_time = 510)
audio_t <- read_audio_fft("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
start_time = 500, end_time = 510)
class(audio_t)
dim(audio_t)
plot(audio_t)
audio_t <- read_audio_fft("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
overlap = 0.5, start_time = 500, end_time = 510)
plot(audio_t)
play(audio_t)
audio_t <- read_audio_fft("/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
start_time = 500, end_time = 510)
play(audio_t)
class(audio_t )
# Define paths
full_audio_path <- file.path(tempdir(), "temp_sound.wav")  # Full audio file
trimmed_audio_path <- file.path(tempdir(), "temp_sound_clip.wav")  # Trimmed clip
# Delete previous files to prevent accumulation
if (file.exists(full_audio_path)) file.remove(full_audio_path)
if (file.exists(trimmed_audio_path)) file.remove(trimmed_audio_path)
# Get selected audio URL from button click
selected_audio_url <- "/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav"
# Download the full file (change to tempdir() if needed)
download.file(selected_audio_url, destfile = full_audio_path, mode = "wb")
full_audio_path <- selected_audio_url
# Use FFmpeg to extract only the needed 5-second segment
ffmpeg_command <- sprintf(
'ffmpeg -i "%s" -ss 2 -t 10 -c copy "%s"',
full_audio_path, trimmed_audio_path
)
system(ffmpeg_command, intern = TRUE)  # Run FFmpeg
clip_t <- av::av_audio_convert(input = "/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
output = file.path(tempdir(), "sound_clip.wav"),
start_time = 33,
end_time = 43)
clip_t <- av::av_audio_convert(audio = "/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
output = file.path(tempdir(), "sound_clip.wav"),
start_time = 33,
end_time = 43)
clip_t <- av::av_audio_convert(audio = "/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
output = file.path(tempdir(), "sound_clip.wav"),
start_time = 33,
end_time = 10)
clip_t <- av::av_audio_convert(audio = "/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
output = file.path(tempdir(), "sound_clip.wav"),
start_time = 33,
total_time = 10)
t_wav <- tuneR::readWave(file.path(tempdir(), "sound_clip.wav"))
play(t_wav)
tuneR::play(t_wav)
clip_t <- av::av_audio_convert(audio = "/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
output = file.path(tempdir(), "sound_clip.wav"),
start_time = 125,
total_time = 10)
t_wav <- tuneR::readWave(file.path(tempdir(), "sound_clip.wav"))
tuneR::play(t_wav)
clip_t <- av::av_audio_convert(audio = "/Users/laurenwick/Dropbox/Lauren Wick/Test audio/SM-SCH1-V2_20240225_055200.wav",
output = file.path(tempdir(), "sound_clip.wav"),
start_time = 500,
total_time = 10)
t_wav <- tuneR::readWave(file.path(tempdir(), "sound_clip.wav"))
tuneR::play(t_wav)
library(shiny); runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
library(shiny); runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
library(shiny); runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
runApp('Documents/GitHub/bird-workbench/plotly_app_with_overview.R')
